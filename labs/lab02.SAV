/* 
 *  lab02 - Manual scheduling
 *	ELEC 424
 *	Zihe Huang, Lindsay Langford, Minh Nguyen
 */

#include "init.h"

// Global var declarations
RCC_ClocksTypeDef RCC_ClockFreq;

// Main function
int main() {

	// Initialize the uC
	sys_init();

	// Get the clock freqs for debug purposes
	RCC_GetClocksFreq(&RCC_ClockFreq);
	 
	return 0;
}

/*
 * system_init - Initializes the STM32 for its intended use in this program. 
 *       		 Sets up clock speed, GPIOs, peripherals, etc.
 * 
 * Inputs: None
 * Outputs: None
 *
 */  
void sys_init(void) {

	clk_init();

}

/*
 * clk_init - Initializes the clocks. Currently hardcoded to use the HSE 
 *			  for a source and then have a sysclk frequency of 72 MHz.
 *
 * Inputs: None
 * Outputs: None  
 */
void clk_init(void) {

	// Reset the RCC configuration
	RCC_DeInit();

	// Turn on the HSE and wait for it to start up successfully
	RCC_HSEConfig(RCC_HSE_ON);
	while (RCC_WaitForHSEStartUp() != SUCCESS) {}

	// Enable Prefetch Buffer 
	FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);

	// Two latency cycles for flash memory	
	FLASH_SetLatency(FLASH_Latency_2);

	// Get the general APB clock from SYSCLK divided by 1
	RCC_HCLKConfig(RCC_SYSCLK_Div1);

	// Get the APB1 clock from HCLK divided by 1
	RCC_PCLK1Config(RCC_HCLK_Div1);

	// Get the APB2 clock from HCLK divided by 1
	RCC_PCLK2Config(RCC_HCLK_Div1);

	/*
	 * Configure the PLL
	 * PLLCLK = (HSE / 2) * 9 = 72 MHz 
	 */
	RCC_PLLConfig(RCC_PLLSource_HSE_Div2, RCC_PLLMul_9);

	// Enable the PLL and wait for it to turn on
	RCC_PLLCmd(ENABLE); 
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {}

	// Make PLLCLK the system clock and wait for that to take effect
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
	while (RCC_GetSYSCLKSource() != PLLCLK){}

}
